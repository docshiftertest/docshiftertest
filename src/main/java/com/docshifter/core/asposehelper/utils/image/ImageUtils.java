package com.docshifter.core.asposehelper.utils.image;

import com.aspose.pdf.PageSize;
import com.aspose.pdf.Rectangle;
import com.aspose.words.ImageSize;
import com.aspose.words.PaperSize;
import lombok.extern.log4j.Log4j2;
import org.apache.commons.imaging.ImageReadException;
import org.apache.commons.imaging.Imaging;
import org.apache.commons.imaging.common.bytesource.ByteSource;
import org.apache.commons.imaging.common.bytesource.ByteSourceFile;
import org.apache.commons.imaging.formats.jpeg.JpegImageParser;
import org.apache.commons.imaging.formats.jpeg.segments.UnknownSegment;
import org.apache.commons.lang.StringUtils;
import javax.imageio.IIOException;
import javax.imageio.ImageIO;
import javax.imageio.ImageReader;
import javax.imageio.stream.ImageInputStream;
import java.awt.*;
import java.awt.color.ColorSpace;
import java.awt.color.ICC_ColorSpace;
import java.awt.color.ICC_Profile;
import java.awt.image.BufferedImage;
import java.awt.image.ColorConvertOp;
import java.awt.image.Raster;
import java.awt.image.WritableRaster;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Field;
import java.util.Iterator;
import java.util.List;

@Log4j2
public class ImageUtils {

	public static String DS_WHITE_LOGO_FILE_LOCATION = "/logos/logo-white-background.png";
	private static final String DS_LOGO_DATA = "";
    public static final int COLOR_TYPE_RGB = 1;
    public static final int COLOR_TYPE_CMYK = 2;
    public static final int COLOR_TYPE_YCCK = 3;

    private int colorType = COLOR_TYPE_RGB;
    private boolean hasAdobeMarker = false;


	/**
	 * Scale a BufferedImage to a maximum height and width
	 * @param src A BufferedImage
	 * @param bounds A rectangle specifying the maximum height and width
	 * @return A scaled BufferedImage (getScaledImage from BufferedImage returns an Image 
	 * 			which is not so handy)
	 */
	public static BufferedImage getScaledImage(BufferedImage src, Rectangle bounds, boolean upScale){
	    return getScaledImage(src, 
	    		bounds.getWidth(), bounds.getHeight(), upScale);
	}

	/**
	 * Scale a BufferedImage to a maximum height and width
	 * @param src A BufferedImage
	 * @param bounds A rectangle specifying the maximum height and width
	 * @return A scaled BufferedImage (getScaledImage from BufferedImage returns an Image 
	 * 			which is not so handy)
	 */
	public static BufferedImage getScaledImage(BufferedImage src, ImageSize bounds, boolean upScale){
	    return getScaledImage(src, 
	    		bounds.getWidthPoints(), bounds.getHeightPoints(), upScale);
	}

	/**
	 * Scale a BufferedImage to a maximum height and width. If the width gets scaled we adjust 
	 * the height but then check whether the height is within the bounds...and may adjust 
	 * the width again (but it's only int operations, we don't actually scale until the end!)
	 * @param src A BufferedImage
	 * @param boundWidth The maximum allowed width
	 * @param boundHeight The maximum allowed height
	 * @return A scaled BufferedImage (getScaledImage from BufferedImage returns an Image 
	 * 			which is not so handy)
	 */
	public static BufferedImage getScaledImage(BufferedImage src, 
			double boundWidth, double boundHeight, boolean upScale){
	    Rectangle scaled = scaleToBounds(src.getWidth(), src.getHeight(), boundWidth, boundHeight, upScale);
	    // Don't scale unnecessarily
	    if (!upScale && src.getWidth() <= boundWidth && src.getHeight() <= boundHeight) {
	    	return src;
	    }
	    BufferedImage resizedImg = new BufferedImage((int) scaled.getWidth(), (int) scaled.getHeight(), BufferedImage.TYPE_INT_RGB);
	    Graphics2D g2 = resizedImg.createGraphics();
	    g2.setBackground(Color.WHITE);
	    g2.clearRect(0, 0, (int) scaled.getWidth(), (int) scaled.getHeight());
	    g2.drawImage(src, 0, 0, (int) scaled.getWidth(), (int) scaled.getHeight(), null);
	    g2.dispose();
	    return resizedImg;
	}
	
	public static Rectangle scaleToBounds(Rectangle original, Rectangle bounds, boolean upScale) {
	    return scaleToBounds(original.getWidth(), original.getHeight(), bounds.getWidth(), bounds.getHeight(), upScale);
	}

	public static Rectangle scaleToBounds(Rectangle original, 
			double boundWidth, double boundHeight, boolean upScale) {
	    return scaleToBounds(original.getWidth(), original.getHeight(), boundWidth, boundHeight, upScale);
	}

	public static Rectangle scaleToBounds(double originalWidth, double originalHeight, 
			Rectangle bounds, boolean upScale) {
	    return scaleToBounds(originalWidth, originalHeight, bounds.getWidth(), bounds.getHeight(), upScale);
	}

	public static Rectangle scaleToBounds(ImageSize imageSize, 
			ImageSize bounds, boolean upScale) {
	    return scaleToBounds(imageSize.getWidthPoints(), imageSize.getHeightPoints(), bounds.getWidthPoints(), bounds.getHeightPoints(), upScale);
	}

	public static Rectangle scaleToBounds(ImageSize imageSize, 
			Rectangle bounds, boolean upScale) {
	    return scaleToBounds(imageSize.getWidthPoints(), imageSize.getHeightPoints(), bounds.getWidth(), bounds.getHeight(), upScale);
	}

	public static Rectangle scaleToBounds(ImageSize imageSize, 
			double boundWidth, double boundHeight, boolean upScale) {
	    return scaleToBounds(imageSize.getWidthPoints(), imageSize.getHeightPoints(), boundWidth, boundHeight, upScale);
	}

	public static Rectangle scaleToBounds(double originalWidth, double originalHeight, 
			double boundWidth, double boundHeight, boolean upScale) {
	    double[] scaled = getScaledDims(boundWidth, boundHeight, originalWidth, originalHeight, upScale);
	    return new Rectangle(0, 0, scaled[0], scaled[1]);
	}

	/**
	 * Try to get a Color, first by name and if that doesn't work, then we presume it's a hex string. Returns BLACK in
	 * case even the hex string is not parsable.
	 * @param nm Name of a Color (yellow, black, blue...) or a hex string defining (alpha)rgb
	 * @return The desired java awt Color object or else BLACK
	 */
	public static Color getColorOrBlack(String nm) {
		return getColor(nm, Color.BLACK);
	}

	/**
	 * Try to get a Color, first by name and if that doesn't work, then we presume it's a hex string. Has a final
	 * fallback Color in case even the hex string is not parsable.
	 * @param nm Name of a Color (yellow, black, blue...) or a hex string defining (alpha)rgb
	 * @param fallback A fallback Color in case something goes wrong.
	 * @return The desired java awt Color object or else the provided fallback Color
	 */
	public static Color getColor(String nm, Color fallback) {
		try {
			return getColor(nm);
		} catch (Exception ex) {
			if (StringUtils.isNotBlank(nm)) {
				// If an unparseable String was provided, WARN the user that the fallback value was returned (this
				// fallback event might possibly be an attention point)
				log.warn("The color \"{}\" could not be parsed, so we will fallback to {}", nm, fallback);
			}
			else if (fallback != null) {
				// If an empty String was provided and the fallback is not NULL, INFORM the user that the fallback
				// value was returned (we just assume no explicit value was provided)
				log.info("The provided color is empty, so we will fallback to {}", fallback);
			}
			// We don't care logging a fallback event if both the provided String is empty/null and the fallback
			// Color is null
			return fallback;
		}
	}

	private static Color getKnownColour(String nm) {
		Color result = null;
		switch (nm.toLowerCase().replaceAll("[ _-]+", "")) {
			case "brown":
				result = new Color(0xA5, 0x2A, 0x2A);
				break;
			case "lightblue":
				result = new Color(0xAD, 0xD8, 0xE6);
				break;
			case "darkblue":
				result = new Color(0x00, 0x00, 0x8B);
				break;
			case "darkorange":
				result = new Color(0xFF, 0x8C, 0x00);
				break;
			case "lightgreen":
				result = new Color(0x90, 0xEE, 0x90);
				break;
			case "darkgreen":
				result = new Color(0x00, 0x64, 0x00);
				break;
			case "violet":
				result = new Color(0xEE, 0x82, 0xEE);
				break;
			case "indigo":
				result = new Color(0x4B, 0x00, 0x82);
				break;
			case "purple":
				result = new Color(0x80, 0x00, 0x80);
				break;
			case "rebeccapurple":
				result = new Color(0x66, 0x33, 0x99);
				break;
		}
		return result;
	}

	/**
	 * Try to get a Color, first by name and if that doesn't work, then we presume it's a hex string
	 * @param nm Name of a Color (yellow, black, blue...) or a hex string defining (alpha)rgb
	 * @return A java awt Color object
	 * @throws NumberFormatException The Color name is blank, is not known to Java AWT or is not a parsable hex string.
	 */
	public static Color getColor(String nm) throws NumberFormatException {
		if (StringUtils.isBlank(nm)) {
			throw new NumberFormatException("A null, empty or blank value is not a valid colour!");
		}

		if (nm.startsWith("#")) {
			log.debug("Color {} starts with # so will assume it is a hex value.", nm);
			return decodeWithAlpha(nm);
		}

		Color knownColor = getKnownColour(nm);
		if (knownColor != null) {
			return knownColor;
		}
		log.debug("Color {} was not a known color, so will try to get it from AWT next.", nm);

		nm = nm.trim().toUpperCase();
		try {
			Field field = Class.forName("java.awt.Color")
					.getField(nm.replace(' ', '_').replace("GREY", "GRAY"));
			return (Color)field.get(null);
		} catch (Exception e) {
			log.debug("Color {} was not found in AWT, so we'll try to decode it as a hex string as a last resort.", nm);
			return decodeWithAlpha(nm);
		}
	}

    /**
     * 
     * @param nm RGB hex string that may also include Alpha value
     * @return A java awt Color object
     * @throws NumberFormatException
     */
	private static Color decodeWithAlpha(String nm) throws NumberFormatException {
		final int maxLength;
		if (nm.startsWith("0X")) {
			maxLength = 10;
		} else {
			maxLength = 9;
			if (!nm.startsWith("#")) {
				nm = "#" + nm;
			}
		}
		if (nm.length() > maxLength) {
			throw new NumberFormatException("Hex string [" + nm + "] is too long.");
		}

		long l = Long.decode(nm);
    	long alpha;
    	if (nm.length() <= 7) {
			// If no alpha bits, default to 255
    		alpha = 255;
    	} else {
			// Alpha channel is the most significant
    		alpha = (l >> 24) & 0xFF;
		}
    	log.debug("Creating a new colour with alpha: {}", alpha);
        return new Color((int)(l >> 16) & 0xFF, (int)(l >> 8) & 0xFF, (int)l & 0xFF, (int)alpha);
    }

    // Read jpegs with any colourspace you care to mention!
	public BufferedImage readImage(File file) throws IOException, ImageReadException {
        colorType = COLOR_TYPE_RGB;
        hasAdobeMarker = false;

        ImageInputStream stream = ImageIO.createImageInputStream(file);
        Iterator<ImageReader> iter = ImageIO.getImageReaders(stream);
        while (iter.hasNext()) {
            ImageReader reader = iter.next();
            reader.setInput(stream);

            BufferedImage image;
            ICC_Profile profile = null;
            try {
                image = reader.read(0);
            } catch (IIOException e) {
                colorType = COLOR_TYPE_CMYK;
                checkAdobeMarker(file);
                profile = Imaging.getICCProfile(file);
                WritableRaster raster = (WritableRaster) reader.readRaster(0, null);
                if (colorType == COLOR_TYPE_YCCK)
                    convertYcckToCmyk(raster);
                if (hasAdobeMarker)
                    convertInvertedColors(raster);
                image = convertCmykToRgb(raster, profile);
            }

            return image;
        }

        return null;
    }

    public void checkAdobeMarker(File file) throws IOException, ImageReadException {
        JpegImageParser parser = new JpegImageParser();
        ByteSource byteSource = new ByteSourceFile(file);
        @SuppressWarnings("rawtypes")
        List segments = parser.readSegments(byteSource, new int[] { 0xffee }, true);
        if (segments != null && segments.size() >= 1) {
            UnknownSegment app14Segment = (UnknownSegment) segments.get(0);
            //byte[] data = app14Segment.bytes;
            byte[] data = app14Segment.getSegmentData();
            if (data.length >= 12 && data[0] == 'A' && data[1] == 'd' && data[2] == 'o' && data[3] == 'b' && data[4] == 'e')
            {
                hasAdobeMarker = true;
                //int transform = app14Segment.bytes[11] & 0xff;
                int transform = app14Segment.getSegmentData()[11] & 0xff;
                if (transform == 2)
                    colorType = COLOR_TYPE_YCCK;
            }
        }
    }

    public static void convertYcckToCmyk(WritableRaster raster) {
        int height = raster.getHeight();
        int width = raster.getWidth();
        int stride = width * 4;
        int[] pixelRow = new int[stride];
        for (int h = 0; h < height; h++) {
            raster.getPixels(0, h, width, 1, pixelRow);

            for (int x = 0; x < stride; x += 4) {
                int y = pixelRow[x];
                int cb = pixelRow[x + 1];
                int cr = pixelRow[x + 2];

                int c = (int) (y + 1.402 * cr - 178.956);
                int m = (int) (y - 0.34414 * cb - 0.71414 * cr + 135.95984);
                y = (int) (y + 1.772 * cb - 226.316);

                if (c < 0) c = 0; else if (c > 255) c = 255;
                if (m < 0) m = 0; else if (m > 255) m = 255;
                if (y < 0) y = 0; else if (y > 255) y = 255;

                pixelRow[x] = 255 - c;
                pixelRow[x + 1] = 255 - m;
                pixelRow[x + 2] = 255 - y;
            }

            raster.setPixels(0, h, width, 1, pixelRow);
        }
    }

    public static void convertInvertedColors(WritableRaster raster) {
        int height = raster.getHeight();
        int width = raster.getWidth();
        int stride = width * 4;
        int[] pixelRow = new int[stride];
        for (int h = 0; h < height; h++) {
            raster.getPixels(0, h, width, 1, pixelRow);
            for (int x = 0; x < stride; x++)
                pixelRow[x] = 255 - pixelRow[x];
            raster.setPixels(0, h, width, 1, pixelRow);
        }
    }

    public static BufferedImage convertCmykToRgb(Raster cmykRaster, ICC_Profile cmykProfile) throws IOException {
        if (cmykProfile == null)
            cmykProfile = ICC_Profile.getInstance(ImageUtils.class.getResourceAsStream("/ISOcoated_v2_300_eci.icc"));
        if (cmykProfile.getProfileClass() != ICC_Profile.CLASS_DISPLAY) {
            byte[] profileData = cmykProfile.getData(); // Need to clone entire profile, due to a JDK 7 bug

            if (profileData[ICC_Profile.icHdrRenderingIntent] == ICC_Profile.icPerceptual) {
                intToBigEndian(ICC_Profile.icSigDisplayClass, profileData, ICC_Profile.icHdrDeviceClass); // Header is first

                cmykProfile = ICC_Profile.getInstance(profileData);
            }
        }
        ICC_ColorSpace cmykCS = new ICC_ColorSpace(cmykProfile);
        BufferedImage rgbImage = new BufferedImage(cmykRaster.getWidth(), cmykRaster.getHeight(), BufferedImage.TYPE_INT_RGB);
        WritableRaster rgbRaster = rgbImage.getRaster();
        ColorSpace rgbCS = rgbImage.getColorModel().getColorSpace();
        ColorConvertOp cmykToRgb = new ColorConvertOp(cmykCS, rgbCS, null);
        cmykToRgb.filter(cmykRaster, rgbRaster);
        return rgbImage;
    }

    static void intToBigEndian(int value, byte[] array, int index) {
        array[index]   = (byte) (value >> 24);
        array[index+1] = (byte) (value >> 16);
        array[index+2] = (byte) (value >>  8);
        array[index+3] = (byte) (value);
    }

	/**
	 * Given the width and height of the page size we want the output to be, and the current
	 * width and height of the slides in the presentation, return a double[] of the new
	 * dimensions. If upscale is true, a scaling factor greater than 1 may be used 
	 * @param pageWidth Width of the page in pixels for 72DPI (e.g. for A4 Portrait it's 595) 
	 * @param pageHeight Height of the page in pixels for 72DPI (e.g. for A4 Portrait it's 842)
	 * @param slideWidth Current width of the Slides in the Presentation
	 * @param slideHeight Current height of the Slides in the Presentation
	 * @return A double[] of the new dimensions
	 */
	public static double[] getScaledDims(double pageWidth, double pageHeight, 
			double slideWidth, double slideHeight, boolean upScale) {
		double ratioW = pageWidth / slideWidth; 
		double ratioH = pageHeight / slideHeight;

		// A smaller ratio will ensure that the image fits on the page
		double ratio = Math.min(ratioW, ratioH);
	    if ((slideWidth * ratio - pageWidth) > 1) {
	    	log.warn("Width ({}) will be too large to fit on page ({})", slideWidth * ratio, pageWidth);
	    }
	    if ((slideHeight * ratio - pageHeight) > 1) {
	    	log.warn("Height ({}) will be too large to fit on page ({})", slideHeight * ratio, pageHeight);
	    }
	    // If we would be upscaling (ratio > 1) but upScale NOT requested, set ratio back to 1 (no resizing)
	    if (ratio > 1 && !upScale) {
	    	ratio = 1;
	    }
		return new double[] {slideWidth * ratio, slideHeight * ratio};
	}

	/**
	 * Convert a String representation of a Page Size to an Aspose PDF PageSize object
	 * of the correct Width and Height
	 * @param pageSize String containing e.g. A4, Letter, Legal
	 * @return An Aspose PDF PageSize object of the correct dimensions
	 */
	public static PageSize parsePageSize(String pageSize) {
		switch (pageSize.toUpperCase()) {
			case "A0":
				return PageSize.getA0();
			case "A1":
				return PageSize.getA1();
			case "A2":
				return PageSize.getA2();
			case "A3":
				return PageSize.getA3();
			case "A4":
				return PageSize.getA4();
			case "A5":
				return PageSize.getA5();
			case "A6":
				return PageSize.getA6();
			case "A7":
				return new PageSize(210, 298);
			case "A8":
				return new PageSize(147, 210);
			case "A9":
				return new PageSize(105, 147);
			case "A10":
				return new PageSize(74, 105);
			case "B0":
				return new PageSize(2834, 4008);
			case "B1":
				return new PageSize(2004, 2834);
			case "B2":
				return new PageSize(1417, 2004);
			case "B3":
				return new PageSize(1001, 1417);
			case "B4":
				return new PageSize(709, 1001);
			case "B5":
				return PageSize.getB5();
			case "B6":
				return new PageSize(354, 499);
			case "B7":
				return new PageSize(249, 354);
			case "B8":
				return new PageSize(176, 249);
			case "B9":
				return new PageSize(125, 176);
			case "B10":
				return new PageSize(88, 125);
			case "11X17":
				return PageSize.getP11x17();
			case "LEDGER":
				return PageSize.getPageLedger();
			case "LEGAL":
				return PageSize.getPageLegal();
			case "LETTER":
				return PageSize.getPageLetter();
			default:
				log.warn("Got a bad or empty page size: [{}]. Defaulting to A4...", pageSize);
				return PageSize.getA4();
		}
	}

	/**
	 * Convert a String representation of a Paper Size to an Aspose Words PaperSize (int)
	 * @return An Aspose Words PaperSize as an int
	 */
	public static int parsePaperSize(String paperSize) {
		if (StringUtils.isBlank(paperSize)) {
			log.warn("Got a bad or empty paper size: [{}]. Defaulting to A4...", paperSize);
			return PaperSize.A4;
		}
		switch (paperSize.toUpperCase()) {
			case "A3":
				return PaperSize.A3;
			case "A4":
				return PaperSize.A4;
			case "A5":
				return PaperSize.A5;
			case "B4":
				return PaperSize.B4;
			case "B5":
				return PaperSize.B5;
			case "ENVELOPE":
			case "ENVELOPE_DL":
			case "ENVELOPE DL":
			case "ENVELOPE-DL":
				return PaperSize.ENVELOPE_DL;
			case "EXECUTIVE":
				return PaperSize.EXECUTIVE;
			case "FOLIO":
				return PaperSize.FOLIO;
			case "LEDGER":
				return PaperSize.LEDGER;
			case "LEGAL":
				return PaperSize.LEGAL;
			case "LETTER":
				return PaperSize.LETTER;
			case "10X14":
				return PaperSize.PAPER_10_X_14;
			case "11X17":
				return PaperSize.PAPER_11_X_17;
			case "QUARTO":
				return PaperSize.QUARTO;
			case "STATEMENT":
				return PaperSize.STATEMENT;
			case "TABLOID":
				return PaperSize.TABLOID;
			default:
				log.warn("Got a bad or empty paper size: [{}]. Defaulting to A4...", paperSize);
				return PaperSize.A4;
		}
	}

	public static double[] getSelectedWidthAndHeight(String pageSize, String orientation, int imageWidth, int imageHeight) {
		double[] result = new double[] {-1, -1};
		if (StringUtils.isNotEmpty(pageSize)) {
			PageSize chosenPageSize = ImageUtils.parsePageSize(pageSize);
			boolean landscape = imageWidth > imageHeight;
			if ("LANDSCAPE".equalsIgnoreCase(orientation)) {
				landscape = true;
			}
			else {
				landscape = false;
			}
			if (landscape) {
				// Flip the width and height as it's landscape
				result[0] = chosenPageSize.getHeight();
				result[1] = chosenPageSize.getWidth();
			}
			else {
				result[0] = chosenPageSize.getWidth();
				result[1] = chosenPageSize.getHeight();
			}
		}
		return result;
	}

	/**
	 * Get the nice full DocShifter logo from the Beans jar
	 * We may return null if something goes wrong, so callers should allow for that
	 * @return BufferedImage the DocShifter logo
	 */
	public static BufferedImage getLogo() {
		return getLogo(null);
	}

	/**
	 * Get the nice full DocShifter logo from the Beans jar
	 * We may return null if something goes wrong, so callers should allow for that
	 * @param data
	 * @return BufferedImage the DocShifter logo
	 */
	public static BufferedImage getLogo(long[] data) {
		BufferedImage bufferedImage = null;
		InputStream in = ImageUtils.class.getResourceAsStream(DS_WHITE_LOGO_FILE_LOCATION);
		try {
			bufferedImage = ImageIO.read(in);
		}
		catch (IOException ioe) {
			log.warn("Could not read the logo from the location: {}", DS_WHITE_LOGO_FILE_LOCATION, ioe);
		}
		if (bufferedImage == null) {
			bufferedImage = getFallbackLogo();
		}
		applyData(bufferedImage, data);
		return bufferedImage;
	}

	private static void applyData(BufferedImage bufferedImage, long[] data) {
		// We are applying data... an array of usually 4 longs to an image
		// The data is encoded in the image, in the top and bottom lines of the image
		// The image should be at least 130 pixels wide and it's best if there is a
		// continuous line of white pixels at least as the top and bottom line of the image
		if (bufferedImage != null && data != null && data.length > 0) {
			// Create a graphics which can be used to draw into the buffered image
			Graphics2D g2d = bufferedImage.createGraphics();
			int idx = 2;
			int idy = 0;
			// Generally we allow for up to 4 numbers to be stored in the image
			// Here we encode the number of items less 1
			// So 1 item will be encoded as 0 = 00
			//    2 items as 1                = 01
			//    3 items as 2                = 10
			//    4 items as 3                = 11
			for (int cntBit=0;cntBit<2;cntBit++) {
				if (((data.length - 1) & (cntBit+1)) == 0) {
					paintBit(g2d, cntBit, 0, '0');
				}
				else {
					paintBit(g2d, cntBit, 0, '1');
				}
			}
			for (int didx = 0; didx < data.length; didx++) {
				// Get one of the numbers as a String of 0s and 1s
				String binStr = Long.toBinaryString(data[didx]);
				// Make sure the binStr is the full 64 bits long
				binStr = ("0000000000000000000000000000000000000000000000000000000000000000" + binStr).substring(binStr.length());
				switch (didx) {
					case 0:
						// Top line of the image at 2 for 64 pixels
						idx = 2;
						idy = 0;
						break;
					case 1:
						// Top line of the image at 66 for 64 pixels
						idx = 66;
						idy = 0;
						break;
					case 2:
						// Bottom line of the image at 2 for 64 pixels
						idx = 2;
						idy = bufferedImage.getHeight() - 1;
						break;
					case 3:
						// Bottom line of the image at 66 for 64 pixels
						idx = 66;
						idy = bufferedImage.getHeight() - 1;
						break;
				}
				// Go through binStr taking one 1 or 0 bit at a time
				for (char c : binStr.toCharArray()) {
					paintBit(g2d, idx, idy, c);
					// We only ever move along the x-axis, either starting at 0 or 65 (so
					// the numbers don't overlap)
					// y is either 0 for the first row of pixels or the height -1 for the
					// last row
					idx++;
				}
			}
			// Disposes of this graphics context and releases any system resources that it is using.
			g2d.dispose();
		}
	}

	private static void paintBit(Graphics2D g2d, int idx, int idy, char bit) {
		// A zero bit we mark as 'black' albeit only the tiniest bit
		// darker than white imaginable (think Planck)
		if (bit == '0') {
			g2d.setColor(Color.decode("0xFEFEFE"));
		}
		else {
			g2d.setColor(Color.white);
		}
		// Fill a one pixel by one pixel 'rectangle' with the chosen colour
		g2d.fillRect(idx, idy, 1, 1);
	}

	/**
	 * If for some reason we can't read the included logo we have a hard-coded fallback logo
	 * @return BufferedImage a 'gracefully degraded' DocShifter logo
	 */
	private static BufferedImage getFallbackLogo () {
		BufferedImage bufferedImage = null;
		// Logo data String has each byte represented as 2 hex digits
		// so the byte array size is 1/2 the length
		byte[] imageBytes = new byte[DS_LOGO_DATA.length()/2];
		for (int idx = 0;idx<DS_LOGO_DATA.length()/2;idx++) {
			// aByte is a 2-digit hex representation of one of the bytes
			String aByte = DS_LOGO_DATA.substring(idx*2, idx*2+2);
			// Radix 16 = we're parsing a hex number, not decimal
			imageBytes[idx] = (byte) Integer.parseInt(aByte, 16);
		}
		try (InputStream istr = new ByteArrayInputStream(imageBytes)) {
			bufferedImage = ImageIO.read(istr);
		}
		catch (IOException ioe) {
			log.warn("Could not read the logo from embedded data", ioe);
		}
		return bufferedImage;
	}
}
